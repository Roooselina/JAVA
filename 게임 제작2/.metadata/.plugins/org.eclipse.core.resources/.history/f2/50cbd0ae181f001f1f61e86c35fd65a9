package Monster;

import java.awt.Rectangle;
import java.io.IOException;
import java.util.Random;

import javax.imageio.ImageIO;

import Entity.CommonEntity;
import main.GamePanel;

public class MON_TreeMonster extends CommonEntity {

    // 생성자: 나무 몬스터의 속성을 초기화
    public MON_TreeMonster(GamePanel gp) {
        super(gp);

        name = "나무 정령"; // 몬스터 이름 설정
        speed = 1; // 몬스터 속도 설정
        maxLife = 4; // 몬스터 최대 생명력 설정
        life = maxLife; // 몬스터 현재 생명력을 최대 생명력으로 초기화
        attack = 1; // 몬스터 공격력 설정

        getImage(); // 몬스터 이미지를 로드

        actionLockerCounter = 0; // 행동 잠금 카운터 초기화
    }

    // 몬스터 이미지를 로드하는 메서드
    public void getImage() {
        try {
            // 각 이미지 파일을 해당 변수에 로드
            st1 = ImageIO.read(getClass().getResourceAsStream("/monsters/나무1.png")); // 정지 상태 이미지 1
            st2 = ImageIO.read(getClass().getResourceAsStream("/monsters/나무2.png")); // 정지 상태 이미지 2
            st3 = ImageIO.read(getClass().getResourceAsStream("/monsters/나무3.png")); // 정지 상태 이미지 3
            st4 = ImageIO.read(getClass().getResourceAsStream("/monsters/나무4.png")); // 정지 상태 이미지 4
            left1 = ImageIO.read(getClass().getResourceAsStream("/monsters/나무1 좌우반전.png")); // 왼쪽 이동 이미지 1
            left2 = ImageIO.read(getClass().getResourceAsStream("/monsters/나무2 좌우반전.png")); // 왼쪽 이동 이미지 2
            left3 = ImageIO.read(getClass().getResourceAsStream("/monsters/나무3 좌우반전.png")); // 왼쪽 이동 이미지 3
            left4 = ImageIO.read(getClass().getResourceAsStream("/monsters/나무4 좌우반전.png")); // 왼쪽 이동 이미지 4
            right1 = ImageIO.read(getClass().getResourceAsStream("/monsters/나무1.png")); // 오른쪽 이동 이미지 1
            right2 = ImageIO.read(getClass().getResourceAsStream("/monsters/나무2.png")); // 오른쪽 이동 이미지 2
            right3 = ImageIO.read(getClass().getResourceAsStream("/monsters/나무3.png")); // 오른쪽 이동 이미지 3
            right4 = ImageIO.read(getClass().getResourceAsStream("/monsters/나무4.png")); // 오른쪽 이동 이미지 4

        } catch (IOException e) {
            e.printStackTrace(); // 이미지 로드 중 오류가 발생하면 스택 트레이스 출력
        }
    }

    // 몬스터의 행동을 설정하는 메서드
    public void setAction() {
        actionLockerCounter += 1; // 행동 잠금 카운터 증가

        // 행동 잠금 카운터가 100일 때 행동 결정
        if (actionLockerCounter == 100) {
            Random random = new Random();
            int i = random.nextInt(100) + 1; // 1부터 100 사이의 난수 생성

            // 1/4확률로 각 방향으로 이동
            if (i <= 25)
                direction = "up";
            else if (i > 25 && i <= 50)
                direction = "down";
            else if (i > 50 && i <= 75)
                direction = "left";
            else
                direction = "right";

            actionLockerCounter = 0;
        }
    }
}

