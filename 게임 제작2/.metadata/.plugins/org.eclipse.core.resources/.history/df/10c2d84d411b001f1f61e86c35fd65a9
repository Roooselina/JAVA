package main;

import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.Color;

public class EventHandler {
    GamePanel gp;
    EventRect eventRect[][];

    public EventHandler(GamePanel gp) {
        this.gp = gp;

        eventRect = new EventRect[gp.maxWorldCol][gp.maxWorldRow];
        
        int col = 0;
        int row = 0;
        while (col < gp.maxWorldCol && row < gp.maxWorldRow) {
            eventRect[col][row] = new EventRect();
            eventRect[col][row].x = 23;
            eventRect[col][row].y = 23;
            eventRect[col][row].width = 5;
            eventRect[col][row].height = 5;
            eventRect[col][row].eventRectDefaultX = eventRect[col][row].x;
            eventRect[col][row].eventRectDefaultY = eventRect[col][row].y;

            col++;
            if (col == gp.maxWorldCol) {
                col = 0;
                row++;
            }
        }
    }

    public void checkEvent() {
        // 이벤트 위치를 확인합니다.
        if (hit(3, 2, "up") || hit(2, 1, "left")) { // 변경: 또는 "left" 방향도 확인
            System.out.println("Event triggered!");
            gp.player.speed += 3;
        }
    }

    public boolean hit(int eventCol, int eventRow, String reqDirection) {
        boolean hit = false;

        // 이벤트 사각형의 위치를 월드 좌표로 변환합니다.
        eventRect[eventCol][eventRow].x = eventCol * gp.getOrigianlCharacterSize() + eventRect[eventCol][eventRow].eventRectDefaultX;
        eventRect[eventCol][eventRow].y = eventRow * gp.getOrigianlCharacterSize() + eventRect[eventCol][eventRow].eventRectDefaultY;

        // 플레이어의 solidArea 위치를 월드 좌표로 변환합니다.
        Rectangle playerSolidArea = new Rectangle(
                gp.player.worldX + gp.player.solidArea.x,
                gp.player.worldY + gp.player.solidArea.y,
                gp.player.solidArea.width,
                gp.player.solidArea.height);

        // 충돌 여부를 확인합니다.
        if (playerSolidArea.intersects(eventRect[eventCol][eventRow])) {
            if (gp.player.direction.equals(reqDirection) || reqDirection.equals("any")) {
                hit = true;
            }
        }

        // 이벤트 사각형의 위치를 복원합니다.
        eventRect[eventCol][eventRow].x = eventRect[eventCol][eventRow].eventRectDefaultX;
        eventRect[eventCol][eventRow].y = eventRect[eventCol][eventRow].eventRectDefaultY;

        return hit;
    }

    public void draw(Graphics2D g2) {
        g2.setColor(new Color(255, 0, 0, 128)); // 반투명 빨간색
        for (int col = 0; col < gp.maxWorldCol; col++) {
            for (int row = 0; row < gp.maxWorldRow; row++) {
                EventRect er = eventRect[col][row];
                g2.fillRect(er.x, er.y, er.width, er.height);
            }
        }
    }

    public void damagePit(int gameState) {
        gp.gameState = gameState;
        gp.ui.currentDialogue = "You fall into a pit!";
        gp.player.life -= 1;
    }
}
