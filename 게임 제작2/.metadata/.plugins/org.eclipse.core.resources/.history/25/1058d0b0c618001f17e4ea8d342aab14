package Entity;

import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.io.IOException;

import javax.imageio.ImageIO;

import main.GamePanel;
import main.KeyHandler;

public class Player extends CommonEntity {

	GamePanel gp;
	KeyHandler keyH;

	public final int screenX;
	public final int screenY;

	public Player(GamePanel gp, KeyHandler keyH) {
		this.gp = gp;
		this.keyH = keyH;

		this.screenX = (gp.screenWidth / 2) - (gp.getOrigianlCharacterSize() / 2);
		this.screenY = (gp.screenHeight / 2) - (gp.getOrigianlCharacterSize() / 2);

		setDefaultValues();
		getPlayerImage();

		solidArea = new Rectangle(20, 32, 12, 30);

	}

	void setDefaultValues() {
		worldX = gp.getOrigianlCharacterSize() * 4;
		worldY = gp.getOrigianlCharacterSize() * 3;
		speed = 4;
		direction = "stand";
	}

	public void getPlayerImage() {
		try {

			st1 = ImageIO.read(getClass().getResourceAsStream("/player/Standing1.png"));
			st2 = ImageIO.read(getClass().getResourceAsStream("/player/Standing2.png"));
			st3 = ImageIO.read(getClass().getResourceAsStream("/player/Standing1.png"));
			st4 = ImageIO.read(getClass().getResourceAsStream("/player/Standing2.png"));
			right1 = ImageIO.read(getClass().getResourceAsStream("/player/Right1.png"));
			right2 = ImageIO.read(getClass().getResourceAsStream("/player/Right2.png"));
			right3 = ImageIO.read(getClass().getResourceAsStream("/player/Right3.png"));
			right4 = ImageIO.read(getClass().getResourceAsStream("/player/Right4.png"));
			left1 = ImageIO.read(getClass().getResourceAsStream("/player/Left1.png"));
			left2 = ImageIO.read(getClass().getResourceAsStream("/player/Left2.png"));
			left3 = ImageIO.read(getClass().getResourceAsStream("/player/Left3.png"));
			left4 = ImageIO.read(getClass().getResourceAsStream("/player/Left4.png"));

		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public void update() {
		if (keyH.upPressed == true || keyH.downPressed == true || keyH.leftPressed == true
				|| keyH.rightPressed == true) {
			if (keyH.upPressed == true) {
				direction = "up";

			} else if (keyH.downPressed == true) {
				direction = "down";

			} else if (keyH.leftPressed == true) {
				direction = "left";

			} else if (keyH.rightPressed == true) {
				direction = "right";

			}
		} else {
			direction = "nothing";
		}

		collisonOn = false;
		gp.cChecker.CheckTile(this);

		if (collisonOn == false) {
			switch (direction) {
			case "up":
				worldY -= speed;
				break;
			case "down":
				worldY += speed;
				break;
			case "left":
				worldX -= speed;
				break;
			case "right":
				worldX += speed;
				break;
			}
		}

		spriteCounter++;
		if (spriteCounter > 12) {
			if (spriteNum == 4) {
				spriteNum = 1;
			} else {
				spriteNum++;
			}
			spriteCounter = 0;
		}
	}

	public void draw(Graphics2D g2) {

		BufferedImage image = null;
		switch (direction) {
		case ("nothing") -> {
			if (spriteNum == 1)
				image = st1;
			else if (spriteNum == 2)
				image = st2;
			else if (spriteNum == 3)
				image = st3;
			else if (spriteNum == 4)
				image = st4;
			break;
		}
		case ("up") -> {
			if (spriteNum == 1)
				image = right1;
			else if (spriteNum == 2)
				image = right2;
			else if (spriteNum == 3)
				image = right3;
			else if (spriteNum == 4)
				image = right4;
			break;
		}
		case ("down") -> {
			if (spriteNum == 1)
				image = right1;
			else if (spriteNum == 2)
				image = right2;
			else if (spriteNum == 3)
				image = right3;
			else if (spriteNum == 4)
				image = right4;
			break;
		}
		case ("right") -> {
			if (spriteNum == 1)
				image = right1;
			else if (spriteNum == 2)
				image = right2;
			else if (spriteNum == 3)
				image = right3;
			else if (spriteNum == 4)
				image = right4;
			break;
		}

		case ("left") -> {
			if (spriteNum == 1)
				image = left1;
			else if (spriteNum == 2)
				image = left2;
			else if (spriteNum == 3)
				image = left3;
			else if (spriteNum == 4)
				image = left4;
			break;
		}
		}
		g2.drawImage(image, screenX, screenY, gp.getOrigianlCharacterSize(), gp.getOrigianlCharacterSize(), null);

	}

}
