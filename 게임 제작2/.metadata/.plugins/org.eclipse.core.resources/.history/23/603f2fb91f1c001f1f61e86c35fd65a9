package Entity;

import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.io.IOException;

import javax.imageio.ImageIO;

import Object.OBJ_OPEN_BOX;
import main.GamePanel;
import main.GameScreen;
import main.KeyHandler;

public class Player extends CommonEntity {

    GamePanel gp;
    KeyHandler keyH;

    // 화면의 x, y 좌표
    public final int screenX;
    public final int screenY;

    int openBox = 0;

    // Player 생성자
    public Player(GamePanel gp, KeyHandler keyH) {
        super(gp);

        // GamePanel과 KeyHandler를 받아들이고 초기화합니다.
        this.gp = gp;
        this.keyH = keyH;

        // 화면의 가운데에 캐릭터를 배치합니다.
        this.screenX = (gp.screenWidth / 2) - (gp.getOrigianlCharacterSize() / 2);
        this.screenY = (gp.screenHeight / 2) - (gp.getOrigianlCharacterSize() / 2);

        // 기본값 설정 및 이미지 가져오기
        setDefaultValues();
        getPlayerImage();

        // 충돌 영역 설정
        solidArea = new Rectangle(24, 32, 10, 15);
        solidAreaDefaultX = solidArea.x;
        solidAreaDefaultY = solidArea.y;
    }

    // 기본값 설정
    void setDefaultValues() {
        worldX = gp.getOrigianlCharacterSize() * 4;
        worldY = gp.getOrigianlCharacterSize() * 3;
        speed = 4;
        direction = "stand";
        
        maxLife=6;
        life=4;
    }

    // 캐릭터 이미지 가져오기
    public void getPlayerImage() {
        try {
            // 이미지 로드
            st1 = ImageIO.read(getClass().getResourceAsStream("/player/Standing1.png"));
            st2 = ImageIO.read(getClass().getResourceAsStream("/player/Standing2.png"));
            st3 = ImageIO.read(getClass().getResourceAsStream("/player/Standing1.png"));
            st4 = ImageIO.read(getClass().getResourceAsStream("/player/Standing2.png"));
            right1 = ImageIO.read(getClass().getResourceAsStream("/player/Right1.png"));
            right2 = ImageIO.read(getClass().getResourceAsStream("/player/Right2.png"));
            right3 = ImageIO.read(getClass().getResourceAsStream("/player/Right3.png"));
            right4 = ImageIO.read(getClass().getResourceAsStream("/player/Right4.png"));
            left1 = ImageIO.read(getClass().getResourceAsStream("/player/Left1.png"));
            left2 = ImageIO.read(getClass().getResourceAsStream("/player/Left2.png"));
            left3 = ImageIO.read(getClass().getResourceAsStream("/player/Left3.png"));
            left4 = ImageIO.read(getClass().getResourceAsStream("/player/Left4.png"));

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // 업데이트 메서드
    public void update() {
        // 키 입력에 따라 캐릭터의 방향 설정
        if (keyH.upPressed || keyH.downPressed || keyH.leftPressed || keyH.rightPressed) {
            if (keyH.upPressed) {
                direction = "up";
            } else if (keyH.downPressed) {
                direction = "down";
            } else if (keyH.leftPressed) {
                direction = "left";
            } else if (keyH.rightPressed) {
                direction = "right";
            }
        } else {
            direction = "nothing";
        }

        // 충돌 감지
        collisionOn = false;
        gp.cChecker.CheckTile(this);

        // 오브젝트 충돌 감지
        int objIndex = gp.cChecker.CheckObject(this, true);
		pickUpObject(objIndex);

		// 몬스터 감지
		int monsterCheckIndex = gp.cChecker.checkEntity(this, gp.monster);
		battleState(monsterCheckIndex);
        
        
        // 이벤트 감지
        gp.eHandler.checkEvent();

        // 스프라이트 카운터 업데이트 및 사운드 재생
        spriteCounter++;
        if (spriteCounter > 10) {
            spriteNum = (spriteNum % 4) + 1;
            spriteCounter = 0;

            if (!direction.equals("nothing")) {
                soundRestTerm++;
                if (soundRestTerm == 2) {
                    gp.playSE(3); // SE 재생
                    soundRestTerm = 0; // 사운드 재생 후 soundRestTerm 초기화
                }
            }
        }

        // 충돌이 발생하지 않은 경우, 캐릭터의 위치를 업데이트합니다.
        if (!collisionOn) {
            switch (direction) {
                case "up":
                    worldY -= speed;
                    GameScreen.moveWindow(0, -speed); // 위 방향 이동
                    break;
                case "down":
                    worldY += speed;
                    GameScreen.moveWindow(0, speed); // 아래 방향 이동
                    break;
                case "left":
                    worldX -= speed;
                    GameScreen.moveWindow(-speed, 0); // 왼쪽 방향 이동
                    break;
                case "right":
                    worldX += speed;
                    GameScreen.moveWindow(speed, 0); // 오른쪽 방향 이동
                    break;
            }
        }
    }


	public void pickUpObject(int i) {
		if (keyH.spacePressed) { // 스페이스 바가 눌렸는지 확인
			if (i != 999) {
				String objectName = gp.obj[i].name;

				switch (objectName) {
				case "닫힌 상자":
					// 현재 위치의 닫힌 상자를 열린 상자로 변경
					int worldX = gp.obj[i].worldX;
					int worldY = gp.obj[i].worldY;

					// 상자 소리 재생
					gp.playSE(2);

					// 새로운 열린 상자 객체 생성
					gp.obj[i] = new OBJ_OPEN_BOX();
					gp.obj[i].worldX = worldX;
					gp.obj[i].worldY = worldY;

					break;
				case "계단 상":
					break;
				case "계단 중":
					break;
				case "계단 하":
					break;
				}
			}
		}
	}
	
	public void battleState(int monsterCheckIndex) {
		
	}

	public void draw(Graphics2D g2) {
	    // 방향에 따라 이미지 선택
	    BufferedImage image = null;
	    switch (direction) {
	        case ("nothing") -> {
	            // 정지 상태일 때 이미지 선택
	            if (spriteNum == 1)
	                image = st1;
	            else if (spriteNum == 2)
	                image = st2;
	            else if (spriteNum == 3)
	                image = st3;
	            else if (spriteNum == 4)
	                image = st4;
	            break;
	        }
	        case ("up") -> {
	            // 위쪽 이동 상태일 때 이미지 선택
	            if (spriteNum == 1)
	                image = right1;
	            else if (spriteNum == 2)
	                image = right2;
	            else if (spriteNum == 3)
	                image = right3;
	            else if (spriteNum == 4)
	                image = right4;
	            break;
	        }
	        case ("down") -> {
	            // 아래쪽 이동 상태일 때 이미지 선택
	            if (spriteNum == 1)
	                image = right1;
	            else if (spriteNum == 2)
	                image = right2;
	            else if (spriteNum == 3)
	                image = right3;
	            else if (spriteNum == 4)
	                image = right4;
	            break;
	        }
	        case ("right") -> {
	            // 오른쪽 이동 상태일 때 이미지 선택
	            if (spriteNum == 1)
	                image = right1;
	            else if (spriteNum == 2)
	                image = right2;
	            else if (spriteNum == 3)
	                image = right3;
	            else if (spriteNum == 4)
	                image = right4;
	            break;
	        }
	        case ("left") -> {
	            // 왼쪽 이동 상태일 때 이미지 선택
	            if (spriteNum == 1)
	                image = left1;
	            else if (spriteNum == 2)
	                image = left2;
	            else if (spriteNum == 3)
	                image = left3;
	            else if (spriteNum == 4)
	                image = left4;
	            break;
	        }
	    }

	    // 선택된 이미지를 화면에 그리기
	    g2.drawImage(image, screenX, screenY, gp.getOrigianlCharacterSize(), gp.getOrigianlCharacterSize(), null);
	}
}