package main;

import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.Graphics2D;

public class KeyHandler extends UI implements KeyListener {
    // 키가 눌렸는지 여부를 나타내는 불리언 플래그
    public boolean upPressed, downPressed, leftPressed, rightPressed, spacePressed, enterPressed;
    GamePanel gp;

    // KeyHandler 생성자, GamePanel 인스턴스로 초기화
    public KeyHandler(GamePanel gp) {
        super(gp);
        this.gp = gp;
    }

    // 키가 눌렸을 때 이벤트 처리
    @Override
    public void keyPressed(KeyEvent e) {
        int code = e.getKeyCode();

        // 현재 게임 상태에 따라 각각의 메서드 호출
        if (gp.gameState == gp.titleState)
            handleTitleStateKeyPress(code);
        if (gp.gameState == gp.ScriptState)
            handleScriptStateKeyPress(code);
        if (gp.gameState == gp.startMonologue)
            handleStartMonologueKeyPress(code);
        if (gp.gameState == gp.battleState)
            handleBattleStateKeyPress(code);
        if (gp.gameState == gp.endState)
            handleEndStateKeyPress(code);
        if (gp.gameState == gp.playState || gp.gameState == gp.pauseState)
            handlePlayPauseKeyPress(code);
    }

    // 타이틀 상태에서 키가 눌렸을 때 처리
    private void handleTitleStateKeyPress(int code) {
        if (code == KeyEvent.VK_UP) {
            gp.ui.commandNum = (gp.ui.commandNum - 1 + 3) % 3;
        } else if (code == KeyEvent.VK_DOWN) {
            gp.ui.commandNum = (gp.ui.commandNum + 1) % 3;
        } else if (code == KeyEvent.VK_ENTER) {
            switch (gp.ui.commandNum) {
            case 0:
                gp.gameState = gp.ScriptState;
                gp.ui.scriptNum = 0;
                gp.ui.commandNum = 0;
                break;
            case 1:
                // 게임 로드 로직 추가
                break;
            case 2:
                System.exit(0);
                break;
            }
        }
    }

    // 스크립트 상태에서 키가 눌렸을 때 처리
    private void handleScriptStateKeyPress(int code) {
        if (code == KeyEvent.VK_SPACE) {
            if (gp.ui.scriptNum < 3) {
                gp.ui.scriptNum++;
            } else {
                gp.gameState = gp.startMonologue;
                gp.adjustScreenSize();
            }
        }
    }

    // 모놀로그 시작 상태에서 키가 눌렸을 때 처리
    private void handleStartMonologueKeyPress(int code) {
        if (code == KeyEvent.VK_SPACE) {
            if (gp.ui.dialogueIndex < 3) {
                gp.ui.currentDialogue = gp.ui.mManager.monologues[gp.ui.dialogueIndex].monologue;
                gp.ui.playerFace = gp.ui.mManager.monologues[gp.ui.dialogueIndex++].face;
            } else {
                gp.gameState = gp.playState;
                gp.adjustScreenSize();
                gp.stopMusic();
                gp.playMusic(0);
            }
        }
    }

    // 전투 상태에서 키가 눌렸을 때 처리
    private void handleBattleStateKeyPress(int code) {
        if (code == KeyEvent.VK_UP) {
            gp.ui.commandNum = (gp.ui.commandNum - 1 + 3) % 3;
        } else if (code == KeyEvent.VK_DOWN) {
            gp.ui.commandNum = (gp.ui.commandNum + 1) % 3;
        } else if (code == KeyEvent.VK_ENTER) {
            switch (gp.ui.commandNum) {
            case 0:
                gp.ui.scriptNum = 1;
                if (gp.battleManager.entity.speed > gp.player.speed) {
                    gp.ui.currentDialogue = gp.ui.mManager.battleMonologues[0].monologue;
                    gp.ui.entityAttackPlayer = 1;
                } else {
                    gp.ui.currentDialogue = gp.ui.mManager.battleMonologues[1].monologue;
                    gp.ui.entityAttackPlayer = 0;
                }
                break;
            case 1:
                // 아이템 사용 로직 추가
                break;
            case 2:
                // 도망 로직 추가
                gp.gameState = gp.playState;
                gp.stopMusic();
                gp.playMusic(0);
                gp.adjustScreenSize();
                break;
            }
        } else if (code == KeyEvent.VK_SPACE) {
            if (gp.ui.scriptNum == 1) {
                if (gp.ui.entityAttackPlayer == 1) {
                    gp.ui.currentDialogue = gp.ui.mManager.battleMonologues[1].monologue;
                } else {
                    gp.ui.currentDialogue = gp.ui.mManager.battleMonologues[0].monologue;
                }
                gp.ui.scriptNum = 2;
            } else if (gp.ui.scriptNum == 2) {
                gp.ui.scriptNum = 0;
                gp.gameState = gp.battleState;
            }

            if (gp.ui.scriptNum == 1)
                // 아이템 사용 로직 추가

            if (gp.ui.scriptNum == 2) {
                // 도망 로직 추가
                gp.gameState = gp.playState;
                gp.stopMusic();
                gp.playMusic(0);
                gp.adjustScreenSize();
            }
        }
    }

    // 엔딩 상태에서 키가 눌렸을 때 처리
    private void handleEndStateKeyPress(int code) {
        System.out.println(gp.ui.scriptNum);
        if (code == KeyEvent.VK_SPACE) {
            gp.ui.scriptNum++;
        } else if (gp.ui.scriptNum == 3) {
            if (code == KeyEvent.VK_UP) {
                gp.ui.commandNum = (gp.ui.commandNum - 1 + 2) % 2;
            } else if (code == KeyEvent.VK_DOWN) {
                gp.ui.commandNum = (gp.ui.commandNum + 1) % 2;
            } else if (code == KeyEvent.VK_ENTER) {
                if (gp.ui.commandNum == 0) {
                    System.exit(1);
                } else if (gp.ui.commandNum == 1) {
                    gp.gameState = gp.titleState;
                    gp.stopMusic();
                    gp.playMusic(0);
                    gp.adjustScreenSize();
                }
            }
        }
    }

    // 플레이 또는 일시 정지 상태에서 키가 눌렸을 때 처리
    private void handlePlayPauseKeyPress(int code) {
        switch (code) {
        case KeyEvent.VK_W:
            upPressed = true;
            break;
        case KeyEvent.VK_A:
            leftPressed = true;
            break;
        case KeyEvent.VK_S:
            downPressed = true;
            break;
        case KeyEvent.VK_D:
            rightPressed = true;
            break;
        case KeyEvent.VK_SPACE:
            spacePressed = true;
            break;
        case KeyEvent.VK_ESCAPE:
            gp.gameState = (gp.gameState == gp.playState) ? gp.pauseState : gp.playState;
            break;
        }
    }

    // 키를 뗐을 때 이벤트 처리
    @Override
    public void keyReleased(KeyEvent e) {
        int code = e.getKeyCode(); // 뗀 키의 코드를 가져옴

        // W 키를 뗐을 때
        if (code == KeyEvent.VK_W) {
            upPressed = false;
        }
        // A 키를 뗐을 때
        else if (code == KeyEvent.VK_A) {
            leftPressed = false;
        }
        // S 키를 뗐을 때
        else if (code == KeyEvent.VK_S) {
            downPressed = false;
        }
        // D 키를 뗐을 때
        else if (code == KeyEvent.VK_D) {
            rightPressed = false;
        }
        // Space 키를 뗐을 때
        else if (code == KeyEvent.VK_SPACE) {
            spacePressed = false;
        }
        // Enter 키를 뗐을 때
        else if (code == KeyEvent.VK_ENTER) {
            enterPressed = false;
        }
    }

    // 키가 타이핑될 때 이벤트 처리
    @Override
    public void keyTyped(KeyEvent e) {
        // 이 메서드는 사용하지 않음
    }

    // 엔터 키 입력 대기 메서드
    public void waitForEnter() {
        enterPressed = false;
        while (!enterPressed) {
            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}

